{"ast":null,"code":"import _defineProperty from \"/Users/oliv/Documents/GIT_PROJET03/lyon-0919-react-p2-springfield-vice/springfield_vice/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/oliv/Documents/GIT_PROJET03/lyon-0919-react-p2-springfield-vice/springfield_vice/src/pages/Game.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport Homer from \"../components/Homer\";\nimport config from \"../components/configSpringfieldVice.json\";\nimport JoyWrapper from \"../components/Joystick\";\nimport Timer from \"../components/Timer\";\nimport { Donut } from \"../components/Item\";\nimport { Beer } from \"../components/Item\";\nimport DonutCounter from \"../components/DonutCounter\";\nimport BoutonA from \"../components/BoutonA\";\nimport \"./game.css\";\nimport Modal from \"../components/Modal\";\nimport Health from \"../components/Health\";\nimport MovingObs from \"../components/MovingObs\";\nimport { getRandomArbitrary } from \"../components/helpers\";\nimport Obstacle from \"../components/Obstacle\";\nimport Bart from \"../components/Bart\";\nconst donutStatus = {\n  GROUND: \"ground\",\n  PICKED: \"picked\",\n  THROWN: \"thrown\"\n};\nconst beerStatus = {\n  GROUND: \"ground\",\n  PICKED: \"picked\"\n};\nconst obstacleStatus = {\n  GROUND: \"ground\",\n  PICKED: \"picked\"\n};\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.testLimitsOfMap = () => {\n      if (this.state.positionY < config.limits.topLimit) this.setState({\n        positionY: config.limits.topLimit\n      });else if (this.state.positionY > config.limits.bottomLimit) this.setState({\n        positionY: config.limits.bottomLimit\n      });else if (this.state.positionX > config.limits.rightLimit) this.setState({\n        positionX: config.limits.rightLimit\n      });else if (this.state.positionX < config.limits.leftLimit) this.setState({\n        positionX: config.limits.leftLimit\n      });\n    };\n\n    this.setStep = (stepX, stepY) => {\n      this.stepX = stepX;\n      this.stepY = stepY;\n    };\n\n    this.move = () => {\n      const _this$state = this.state,\n            positionX = _this$state.positionX,\n            positionY = _this$state.positionY;\n      this.setState({\n        positionX: positionX + this.stepX,\n        positionY: positionY + this.stepY,\n        moving: true\n      });\n\n      if (this.stepX < 0) {\n        this.setState({\n          isHomerRunningLeft: true\n        });\n      } else if (this.stepX > 0) {\n        this.setState({\n          isHomerRunningLeft: false\n        });\n      } // if (this.state.isRunning)\n      // \tthis.timeOut = setTimeout(() => this.move(), 10);\n\n\n      if (this.state.isRunning === false) this.stopRunning();\n      if (positionX !== config.limits.leftLimit) this.setState({\n        relativePositionX: this.state.positionX - this.state.defilement,\n        defilement: this.state.defilement - this.stepX / config.background.defilement\n      });\n    };\n\n    this.startRunning = () => {\n      this.setState({\n        isRunning: true\n      });\n      this.state.intervalHomer = setInterval(() => this.move(), 50);\n    };\n\n    this.stopRunning = () => {\n      this.setState({\n        isRunning: false\n      });\n      clearInterval(this.state.intervalHomer);\n    };\n\n    this.moveObs = () => {\n      let i = 0;\n      setInterval(() => {\n        let newPosX = this.state.opponentPos.movX[i];\n        let newPosY = this.state.opponentPos.movY[i];\n        this.setState({\n          opponentPos: _objectSpread({}, this.state.opponentPos, {\n            positionMovingObsX: newPosX,\n            positionMovingObsY: newPosY\n          })\n        });\n        i++;\n\n        if (i >= this.state.opponentPos.movX.length) {\n          i = 0;\n        }\n      }, 1000);\n    };\n\n    this.moveBart = () => {\n      let i = 0;\n      setInterval(() => {\n        let newPosX = this.state.bartPos.BartMovX[i];\n        let newPosY = this.state.bartPos.BartMovY[i];\n        this.setState({\n          bartPos: _objectSpread({}, this.state.bartPos, {\n            positionBartX: newPosX,\n            positionBartY: newPosY\n          })\n        });\n        i++;\n\n        if (i >= this.state.bartPos.BartMovX.length) {\n          i = 0;\n        }\n      }, 1000);\n    };\n\n    this.tick = () => {\n      let seconds = this.state.seconds;\n      this.setState({\n        seconds: seconds - 1\n      });\n\n      if (seconds === 0) {\n        this.setState({\n          seconds: 0\n        });\n        alert(\"GAME OVER\");\n        clearInterval(this.interval);\n      }\n    };\n\n    this.componentDidMount = () => {\n      this.interval = setInterval(() => {\n        this.tick();\n      }, 1000);\n      setInterval(() => this.gameLoop(), 80);\n      this.moveObs();\n      this.moveBart();\n    };\n\n    this.pauseTimer = () => {\n      if (this.state.paused === false) {\n        clearInterval(this.interval);\n      } else {\n        this.componentDidMount();\n      }\n    };\n\n    this.pauseGame = () => {\n      this.setState({\n        paused: !this.state.paused\n      });\n      this.pauseTimer();\n    };\n\n    this.collisionDetection = item => {\n      if (this.state.relativePositionX > item.positionDonutX - 30 && this.state.relativePositionX < item.positionDonutX + 30 && this.state.positionY < item.positionDonutY + 30 && this.state.positionY > item.positionDonutY - 30 && item.status === \"ground\") item.status = \"picked\";\n    };\n\n    this.collisionDetectionBeer = item => {\n      if (this.state.relativePositionX > item.positionBeerX - 30 && this.state.relativePositionX < item.positionBeerX + 30 && this.state.positionY < item.positionBeerY + 30 && this.state.positionY > item.positionBeerY - 30 && item.status === \"ground\") item.status = \"picked\";\n    };\n\n    this.collisionDetectionObstacle = item => {\n      if (this.state.relativePositionX > item.positionObstacleX - 10 && this.state.relativePositionX < item.positionObstacleX + 10 && this.state.positionY < item.positionObstacleY + 30 && this.state.positionY > item.positionObstacleY - 30) {\n        this.setState({\n          isRunning: false,\n          isBlocked: true\n        });\n        item.status = \"picked\";\n      }\n    };\n\n    this.donutCount = () => {\n      let donutCount = 0;\n      this.state.donutPopped.map(item => item.status === \"picked\" ? donutCount = donutCount + 1 : donutCount = donutCount);\n      return donutCount;\n    };\n\n    this.beerCount = () => {\n      let beerCount = 0;\n      this.state.beerPopped.map(item => item.status === \"picked\" ? beerCount = beerCount + 1 : beerCount = beerCount);\n      return beerCount;\n    };\n\n    this.obstacleCollisionCount = () => {\n      let obstacleCount = 0;\n      this.state.obstaclePopped.map(item => item.status === \"picked\" ? obstacleCount = obstacleCount + 1 : obstacleCount = obstacleCount);\n      return obstacleCount;\n    };\n\n    this.throwingDonut = () => {\n      this.setState({\n        isThrowing: true // donutPopped: {...this.state.donutPopped, picked: false}\n\n      });\n      let donutIndex = this.state.donutPopped.findIndex(item => item.status === \"picked\");\n      console.log(donutIndex);\n      if (donutIndex < 0) donutIndex = 0;\n      const donutPopped = this.state.donutPopped;\n      donutPopped[donutIndex].status = donutStatus.THROWN; // donutPopped[donutIndex].display = false;\n\n      this.setState({\n        donutPopped\n      }); // console.log(\"throw\")\n    };\n\n    this.stopThrowingDonut = () => {\n      this.setState({\n        isThrowing: false,\n        displayDonut: false\n      }); // console.log(\"stopthrow\")\n    };\n\n    this.gameLoop = () => {\n      this.state.donutPopped.map(item => this.collisionDetection(item));\n      this.state.beerPopped.map(item => this.collisionDetectionBeer(item));\n      this.state.obstaclePopped.map(item => {\n        this.collisionDetectionObstacle(item);\n      });\n\n      if (this.state.obstaclePopped.status === \"picked\") {\n        displayBarrel = \"none\";\n      } else {\n        display = \"block\";\n      }\n\n      this.testLimitsOfMap();\n    };\n\n    this.state = {\n      positionX: config.initialPosition.x,\n      positionY: config.initialPosition.y,\n      //positionObstacleY: getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit),\n      //positionObstacleX: getRandomArbitrary(config.limits.leftLimit, config.limits.rightLimit),\n      showModal: false,\n      seconds: config.timer.seconds,\n      paused: false,\n      donutPosition: 0,\n      obstaclePosition: 0,\n      positionDecal: 0,\n      positionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n      catchDonut: false,\n      moving: false,\n      isBlocked: false,\n      isThrowing: false,\n      donutPopped: [{\n        positionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n        positionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        status: donutStatus.GROUND,\n        display: true\n      }, {\n        positionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n        positionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        status: donutStatus.GROUND,\n        display: true\n      }, {\n        positionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n        positionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        status: donutStatus.GROUND,\n        display: true\n      }, {\n        positionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n        positionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        status: donutStatus.GROUND,\n        display: true\n      }],\n      beerPopped: [{\n        positionBeerX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n        positionBeerY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        status: beerStatus.GROUND\n      }, {\n        positionBeerX: parseInt(getRandomArbitrary(config.limits.leftLimit, 2000)),\n        positionBeerY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        status: beerStatus.GROUND\n      }, {\n        positionBeerX: parseInt(getRandomArbitrary(config.limits.leftLimit, 3000)),\n        positionBeerY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        status: beerStatus.GROUND\n      }, {\n        positionBeerX: parseInt(getRandomArbitrary(config.limits.leftLimit, 4000)),\n        positionBeerY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        status: beerStatus.GROUND\n      }],\n      obstaclePopped: [{\n        positionObstacleX: parseInt(getRandomArbitrary(config.limits.leftLimit + 100, 1000)),\n        positionObstacleY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        status: obstacleStatus.GROUND\n      }, {\n        positionObstacleX: parseInt(getRandomArbitrary(1000, 3000)),\n        positionObstacleY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        status: obstacleStatus.GROUND\n      }],\n      relativePositionX: config.initialPosition.x,\n      isRunning: false,\n      isHomerRunningLeft: false,\n      opponentPos: {\n        positionMovingObsX: 300,\n        positionMovingObsY: 200,\n        movX: [650, 650, 700, 700, 800, 800, 850, 850, 900, 900, 850, 850, 800, 800, 750, 750, 700, 700],\n        movY: [250, 250, 250, 250, 300, 300, 300, 300, 250, 250, 300, 300, 250, 250, 200, 200, 230, 230]\n      },\n      // {\n      // positionMovingObsX: 850,\n      // positionMovingObsY: 400,\n      // movX: [800, 800, 750, 750, 700, 700, 650, 650, 650, 650, 700, 700, 700, 700, 750, 750],\n      // movY: [350, 350, 400, 400, 350, 350, 350, 350, 300, 300, 250, 250, 200, 200, 300, 300],\n      // },\n      bartPos: {\n        positionBartX: 6000,\n        positionBartY: 200,\n        BartMovX: [6000, 6000, 6000, 6020, 6020, 6050, 6050, 6100, 6100, 6150, 6150, 6200, 6250, 6250, 6300, 6300, 6250, 6250, 6200, 6200, 6100, 6050],\n        BartMovY: [200, 250, 250, 250, 300, 300, 300, 300, 250, 250, 300, 300, 250, 250, 200, 200, 230, 230, 200, 200, 180, 180]\n      },\n      globalPosition: 0,\n      defilement: 0\n    };\n    this.stepX = 0;\n    this.stepY = 0;\n    this.tick = this.tick.bind(this);\n    this.interval = undefined;\n    this.displayBarrel = \"none\";\n  }\n\n  render() {\n    // Modal\n    let params = new URLSearchParams(this.props.location.search);\n    const bgStyle = {\n      backgroundPositionY: config.background.position,\n      backgroundPositionX: -this.state.positionX / config.background.defilement,\n      height: config.background.height\n    };\n    return React.createElement(\"div\", {\n      className: \"game\",\n      style: bgStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, React.createElement(Donut, {\n      donutPopped: this.state.donutPopped,\n      donutPosition: this.state.defilement,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }), React.createElement(Beer, {\n      beerPopped: this.state.beerPopped,\n      beerPosition: this.state.defilement,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }), React.createElement(Obstacle, {\n      obstaclePopped: this.state.obstaclePopped,\n      obstaclePosition: this.state.defilement,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }), React.createElement(MovingObs, {\n      positionMovingObsX: this.state.opponentPos.positionMovingObsX,\n      positionMovingObsY: this.state.opponentPos.positionMovingObsY,\n      defilement: this.state.defilement,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }), React.createElement(Bart, {\n      positionBartX: this.state.bartPos.positionBartX + this.state.defilement,\n      positionBartY: this.state.bartPos.positionBartY,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }), React.createElement(Homer, {\n      positionX: this.state.positionX,\n      positionY: this.state.positionY,\n      isRunning: this.state.isRunning,\n      isHomerRunningLeft: this.state.isHomerRunningLeft,\n      donutCount: this.donutCount(),\n      isThrowing: this.state.isThrowing,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }), React.createElement(DonutCounter, {\n      donutCount: this.donutCount(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }), React.createElement(Health, {\n      beerCounter: this.beerCount(),\n      obstCounter: this.obstacleCollisionCount(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }), React.createElement(JoyWrapper, {\n      setStep: this.setStep,\n      startRunning: this.startRunning,\n      stopRunning: this.stopRunning,\n      toTheRight: this.toTheRight,\n      toTheLeft: this.toTheLeft,\n      toTheTop: this.toTheTop,\n      toTheBottom: this.toTheBottom,\n      displayJoystick: this.state.paused,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }), React.createElement(BoutonA, {\n      throwingDonut: this.throwingDonut,\n      stopThrowingDonut: this.stopThrowingDonut,\n      displayButtonA: this.state.paused,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }), React.createElement(Timer, {\n      pauseGame: this.pauseGame,\n      seconds: this.state.seconds,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }), params.get(\"modal\") && React.createElement(Modal, {\n      modal: this.props.location.search,\n      origin: null,\n      resume: () => this.pauseGame(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/oliv/Documents/GIT_PROJET03/lyon-0919-react-p2-springfield-vice/springfield_vice/src/pages/Game.js"],"names":["React","Component","Homer","config","JoyWrapper","Timer","Donut","Beer","DonutCounter","BoutonA","Modal","Health","MovingObs","getRandomArbitrary","Obstacle","Bart","donutStatus","GROUND","PICKED","THROWN","beerStatus","obstacleStatus","Game","constructor","props","testLimitsOfMap","state","positionY","limits","topLimit","setState","bottomLimit","positionX","rightLimit","leftLimit","setStep","stepX","stepY","move","moving","isHomerRunningLeft","isRunning","stopRunning","relativePositionX","defilement","background","startRunning","intervalHomer","setInterval","clearInterval","moveObs","i","newPosX","opponentPos","movX","newPosY","movY","positionMovingObsX","positionMovingObsY","length","moveBart","bartPos","BartMovX","BartMovY","positionBartX","positionBartY","tick","seconds","alert","interval","componentDidMount","gameLoop","pauseTimer","paused","pauseGame","collisionDetection","item","positionDonutX","positionDonutY","status","collisionDetectionBeer","positionBeerX","positionBeerY","collisionDetectionObstacle","positionObstacleX","positionObstacleY","isBlocked","donutCount","donutPopped","map","beerCount","beerPopped","obstacleCollisionCount","obstacleCount","obstaclePopped","throwingDonut","isThrowing","donutIndex","findIndex","console","log","stopThrowingDonut","displayDonut","displayBarrel","display","initialPosition","x","y","showModal","timer","donutPosition","obstaclePosition","positionDecal","parseInt","catchDonut","globalPosition","bind","undefined","render","params","URLSearchParams","location","search","bgStyle","backgroundPositionY","position","backgroundPositionX","height","toTheRight","toTheLeft","toTheTop","toTheBottom","get"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Homer from \"../components/Homer\";\nimport config from \"../components/configSpringfieldVice.json\";\nimport JoyWrapper from \"../components/Joystick\";\nimport Timer from \"../components/Timer\";\nimport { Donut } from \"../components/Item\";\nimport { Beer } from \"../components/Item\";\nimport DonutCounter from \"../components/DonutCounter\";\nimport BoutonA from \"../components/BoutonA\";\nimport \"./game.css\";\nimport Modal from \"../components/Modal\";\nimport Health from \"../components/Health\";\nimport MovingObs from \"../components/MovingObs\";\nimport { getRandomArbitrary } from \"../components/helpers\";\nimport Obstacle from \"../components/Obstacle\";\nimport Bart from \"../components/Bart\";\n\nconst donutStatus = {\n\tGROUND: \"ground\",\n\tPICKED: \"picked\",\n\tTHROWN: \"thrown\"\n};\nconst beerStatus = {\n\tGROUND: \"ground\",\n\tPICKED: \"picked\"\n};\nconst obstacleStatus = {\n\tGROUND: \"ground\",\n\tPICKED: \"picked\"\n};\n\nclass Game extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tpositionX: config.initialPosition.x,\n\t\t\tpositionY: config.initialPosition.y,\n\t\t\t//positionObstacleY: getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit),\n\t\t\t//positionObstacleX: getRandomArbitrary(config.limits.leftLimit, config.limits.rightLimit),\n\t\t\tshowModal: false,\n\t\t\tseconds: config.timer.seconds,\n\t\t\tpaused: false,\n\t\t\tdonutPosition: 0,\n\t\t\tobstaclePosition: 0,\n\t\t\tpositionDecal: 0,\n\t\t\tpositionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n\t\t\tcatchDonut: false,\n\t\t\tmoving: false,\n\t\t\tisBlocked: false,\n\t\t\tisThrowing: false,\n\t\t\tdonutPopped: [\n\t\t\t\t{\n\t\t\t\t\tpositionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n\t\t\t\t\tpositionDonutY: parseInt(\n\t\t\t\t\t\tgetRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)\n\t\t\t\t\t),\n\t\t\t\t\tstatus: donutStatus.GROUND,\n\t\t\t\t\tdisplay: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpositionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n\t\t\t\t\tpositionDonutY: parseInt(\n\t\t\t\t\t\tgetRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)\n\t\t\t\t\t),\n\t\t\t\t\tstatus: donutStatus.GROUND,\n\t\t\t\t\tdisplay: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpositionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n\t\t\t\t\tpositionDonutY: parseInt(\n\t\t\t\t\t\tgetRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)\n\t\t\t\t\t),\n\t\t\t\t\tstatus: donutStatus.GROUND,\n\t\t\t\t\tdisplay: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpositionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n\t\t\t\t\tpositionDonutY: parseInt(\n\t\t\t\t\t\tgetRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)\n\t\t\t\t\t),\n\t\t\t\t\tstatus: donutStatus.GROUND,\n\t\t\t\t\tdisplay: true\n\t\t\t\t}\n\t\t\t],\n\t\t\tbeerPopped: [\n\t\t\t\t{\n\t\t\t\t\tpositionBeerX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n\t\t\t\t\tpositionBeerY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n\t\t\t\t\tstatus: beerStatus.GROUND\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpositionBeerX: parseInt(getRandomArbitrary(config.limits.leftLimit, 2000)),\n\t\t\t\t\tpositionBeerY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n\t\t\t\t\tstatus: beerStatus.GROUND\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpositionBeerX: parseInt(getRandomArbitrary(config.limits.leftLimit, 3000)),\n\t\t\t\t\tpositionBeerY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n\t\t\t\t\tstatus: beerStatus.GROUND\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpositionBeerX: parseInt(getRandomArbitrary(config.limits.leftLimit, 4000)),\n\t\t\t\t\tpositionBeerY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n\t\t\t\t\tstatus: beerStatus.GROUND\n\t\t\t\t}\n\t\t\t],\n\t\t\tobstaclePopped: [\n\t\t\t\t{\n\t\t\t\t\tpositionObstacleX: parseInt(getRandomArbitrary(config.limits.leftLimit + 100, 1000)),\n\t\t\t\t\tpositionObstacleY: parseInt(\n\t\t\t\t\t\tgetRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)\n\t\t\t\t\t),\n\t\t\t\t\tstatus: obstacleStatus.GROUND\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpositionObstacleX: parseInt(getRandomArbitrary(1000, 3000)),\n\t\t\t\t\tpositionObstacleY: parseInt(\n\t\t\t\t\t\tgetRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)\n\t\t\t\t\t),\n\t\t\t\t\tstatus: obstacleStatus.GROUND\n\t\t\t\t}\n\t\t\t],\n\t\t\trelativePositionX: config.initialPosition.x,\n\t\t\tisRunning: false,\n\t\t\tisHomerRunningLeft: false,\n\t\t\topponentPos: {\n\t\t\t\tpositionMovingObsX: 300,\n\t\t\t\tpositionMovingObsY: 200,\n\t\t\t\tmovX: [650, 650, 700, 700, 800, 800, 850, 850, 900, 900, 850, 850, 800, 800, 750, 750, 700, 700],\n\t\t\t\tmovY: [250, 250, 250, 250, 300, 300, 300, 300, 250, 250, 300, 300, 250, 250, 200, 200, 230, 230]\n\t\t\t},\n\t\t\t// {\n\t\t\t// positionMovingObsX: 850,\n\t\t\t// positionMovingObsY: 400,\n\t\t\t// movX: [800, 800, 750, 750, 700, 700, 650, 650, 650, 650, 700, 700, 700, 700, 750, 750],\n\t\t\t// movY: [350, 350, 400, 400, 350, 350, 350, 350, 300, 300, 250, 250, 200, 200, 300, 300],\n\t\t\t// },\n\t\t\tbartPos: {\n\t\t\t\tpositionBartX: 6000,\n\t\t\t\tpositionBartY: 200,\n\t\t\t\tBartMovX: [\n\t\t\t\t\t6000,\n\t\t\t\t\t6000,\n\t\t\t\t\t6000,\n\t\t\t\t\t6020,\n\t\t\t\t\t6020,\n\t\t\t\t\t6050,\n\t\t\t\t\t6050,\n\t\t\t\t\t6100,\n\t\t\t\t\t6100,\n\t\t\t\t\t6150,\n\t\t\t\t\t6150,\n\t\t\t\t\t6200,\n\t\t\t\t\t6250,\n\t\t\t\t\t6250,\n\t\t\t\t\t6300,\n\t\t\t\t\t6300,\n\t\t\t\t\t6250,\n\t\t\t\t\t6250,\n\t\t\t\t\t6200,\n\t\t\t\t\t6200,\n\t\t\t\t\t6100,\n\t\t\t\t\t6050\n\t\t\t\t],\n\t\t\t\tBartMovY: [\n\t\t\t\t\t200,\n\t\t\t\t\t250,\n\t\t\t\t\t250,\n\t\t\t\t\t250,\n\t\t\t\t\t300,\n\t\t\t\t\t300,\n\t\t\t\t\t300,\n\t\t\t\t\t300,\n\t\t\t\t\t250,\n\t\t\t\t\t250,\n\t\t\t\t\t300,\n\t\t\t\t\t300,\n\t\t\t\t\t250,\n\t\t\t\t\t250,\n\t\t\t\t\t200,\n\t\t\t\t\t200,\n\t\t\t\t\t230,\n\t\t\t\t\t230,\n\t\t\t\t\t200,\n\t\t\t\t\t200,\n\t\t\t\t\t180,\n\t\t\t\t\t180\n\t\t\t\t]\n\t\t\t},\n\t\t\tglobalPosition: 0,\n\t\t\tdefilement: 0\n\t\t};\n\n\t\tthis.stepX = 0;\n\t\tthis.stepY = 0;\n\t\tthis.tick = this.tick.bind(this);\n\t\tthis.interval = undefined;\n\t\tthis.displayBarrel = \"none\";\n\t}\n\n\ttestLimitsOfMap = () => {\n\t\tif (this.state.positionY < config.limits.topLimit) this.setState({ positionY: config.limits.topLimit });\n\t\telse if (this.state.positionY > config.limits.bottomLimit)\n\t\t\tthis.setState({ positionY: config.limits.bottomLimit });\n\t\telse if (this.state.positionX > config.limits.rightLimit)\n\t\t\tthis.setState({ positionX: config.limits.rightLimit });\n\t\telse if (this.state.positionX < config.limits.leftLimit)\n\t\t\tthis.setState({ positionX: config.limits.leftLimit });\n\t};\n\n\tsetStep = (stepX, stepY) => {\n\t\tthis.stepX = stepX;\n\t\tthis.stepY = stepY;\n\t};\n\n\tmove = () => {\n\t\tconst { positionX, positionY } = this.state;\n\n\t\tthis.setState({\n\t\t\tpositionX: positionX + this.stepX,\n\t\t\tpositionY: positionY + this.stepY,\n\t\t\tmoving: true\n\t\t});\n\n\t\tif (this.stepX < 0) {\n\t\t\tthis.setState({ isHomerRunningLeft: true });\n\t\t} else if (this.stepX > 0) {\n\t\t\tthis.setState({ isHomerRunningLeft: false });\n\t\t}\n\t\t// if (this.state.isRunning)\n\t\t// \tthis.timeOut = setTimeout(() => this.move(), 10);\n\n\t\tif (this.state.isRunning === false) this.stopRunning();\n\n\t\tif (positionX !== config.limits.leftLimit)\n\t\t\tthis.setState({\n\t\t\t\trelativePositionX: this.state.positionX - this.state.defilement,\n\t\t\t\tdefilement: this.state.defilement - this.stepX / config.background.defilement\n\t\t\t});\n\t};\n\n\tstartRunning = () => {\n\t\tthis.setState({ isRunning: true });\n\t\tthis.state.intervalHomer = setInterval(() => this.move(), 50);\n\t};\n\tstopRunning = () => {\n\t\tthis.setState({ isRunning: false });\n\t\tclearInterval(this.state.intervalHomer);\n\t};\n\n\tmoveObs = () => {\n\t\tlet i = 0;\n\t\tsetInterval(() => {\n\t\t\tlet newPosX = this.state.opponentPos.movX[i];\n\t\t\tlet newPosY = this.state.opponentPos.movY[i];\n\n\t\t\tthis.setState({\n\t\t\t\topponentPos: {\n\t\t\t\t\t...this.state.opponentPos,\n\t\t\t\t\tpositionMovingObsX: newPosX,\n\t\t\t\t\tpositionMovingObsY: newPosY\n\t\t\t\t}\n\t\t\t});\n\t\t\ti++;\n\t\t\tif (i >= this.state.opponentPos.movX.length) {\n\t\t\t\ti = 0;\n\t\t\t}\n\t\t}, 1000);\n\t};\n\n\tmoveBart = () => {\n\t\tlet i = 0;\n\t\tsetInterval(() => {\n\t\t\tlet newPosX = this.state.bartPos.BartMovX[i];\n\t\t\tlet newPosY = this.state.bartPos.BartMovY[i];\n\t\t\tthis.setState({ bartPos: { ...this.state.bartPos, positionBartX: newPosX, positionBartY: newPosY } });\n\t\t\ti++;\n\t\t\tif (i >= this.state.bartPos.BartMovX.length) {\n\t\t\t\ti = 0;\n\t\t\t}\n\t\t}, 1000);\n\t};\n\n\ttick = () => {\n\t\tlet { seconds } = this.state;\n\t\tthis.setState({ seconds: seconds - 1 });\n\n\t\tif (seconds === 0) {\n\t\t\tthis.setState({ seconds: 0 });\n\t\t\talert(\"GAME OVER\");\n\t\t\tclearInterval(this.interval);\n\t\t}\n\t};\n\n\tcomponentDidMount = () => {\n\t\tthis.interval = setInterval(() => {\n\t\t\tthis.tick();\n\t\t}, 1000);\n\t\tsetInterval(() => this.gameLoop(), 80);\n\n\t\tthis.moveObs();\n\t\tthis.moveBart();\n\t};\n\n\tpauseTimer = () => {\n\t\tif (this.state.paused === false) {\n\t\t\tclearInterval(this.interval);\n\t\t} else {\n\t\t\tthis.componentDidMount();\n\t\t}\n\t};\n\n\tpauseGame = () => {\n\t\tthis.setState({ paused: !this.state.paused });\n\t\tthis.pauseTimer();\n\t};\n\n\tcollisionDetection = (item) => {\n\t\tif (\n\t\t\tthis.state.relativePositionX > item.positionDonutX - 30 &&\n\t\t\tthis.state.relativePositionX < item.positionDonutX + 30 &&\n\t\t\tthis.state.positionY < item.positionDonutY + 30 &&\n\t\t\tthis.state.positionY > item.positionDonutY - 30 &&\n\t\t\titem.status === \"ground\"\n\t\t)\n\t\t\titem.status = \"picked\";\n\t};\n\tcollisionDetectionBeer = (item) => {\n\t\tif (\n\t\t\tthis.state.relativePositionX > item.positionBeerX - 30 &&\n\t\t\tthis.state.relativePositionX < item.positionBeerX + 30 &&\n\t\t\tthis.state.positionY < item.positionBeerY + 30 &&\n\t\t\tthis.state.positionY > item.positionBeerY - 30 &&\n\t\t\titem.status === \"ground\"\n\t\t)\n\t\t\titem.status = \"picked\";\n\t};\n\n\tcollisionDetectionObstacle = (item) => {\n\t\tif (\n\t\t\tthis.state.relativePositionX > item.positionObstacleX - 10 &&\n\t\t\tthis.state.relativePositionX < item.positionObstacleX + 10 &&\n\t\t\tthis.state.positionY < item.positionObstacleY + 30 &&\n\t\t\tthis.state.positionY > item.positionObstacleY - 30\n\t\t) {\n\t\t\tthis.setState({\n\t\t\t\tisRunning: false,\n\t\t\t\tisBlocked: true\n\t\t\t});\n\t\t\titem.status = \"picked\";\n\t\t}\n\t};\n\n\tdonutCount = () => {\n\t\tlet donutCount = 0;\n\t\tthis.state.donutPopped.map((item) =>\n\t\t\titem.status === \"picked\" ? (donutCount = donutCount + 1) : (donutCount = donutCount)\n\t\t);\n\n\t\treturn donutCount;\n\t};\n\tbeerCount = () => {\n\t\tlet beerCount = 0;\n\t\tthis.state.beerPopped.map((item) =>\n\t\t\titem.status === \"picked\" ? (beerCount = beerCount + 1) : (beerCount = beerCount)\n\t\t);\n\n\t\treturn beerCount;\n\t};\n\tobstacleCollisionCount = () => {\n\t\tlet obstacleCount = 0;\n\t\tthis.state.obstaclePopped.map((item) =>\n\t\t\titem.status === \"picked\" ? (obstacleCount = obstacleCount + 1) : (obstacleCount = obstacleCount)\n\t\t);\n\n\t\treturn obstacleCount;\n\t};\n\n\tthrowingDonut = () => {\n\t\tthis.setState({\n\t\t\tisThrowing: true\n\t\t\t// donutPopped: {...this.state.donutPopped, picked: false}\n\t\t});\n\t\tlet donutIndex = this.state.donutPopped.findIndex((item) => item.status === \"picked\");\n\t\tconsole.log(donutIndex);\n\t\tif (donutIndex < 0) donutIndex = 0;\n\t\tconst { donutPopped } = this.state;\n\t\tdonutPopped[donutIndex].status = donutStatus.THROWN;\n\t\t// donutPopped[donutIndex].display = false;\n\t\tthis.setState({ donutPopped });\n\t\t// console.log(\"throw\")\n\t};\n\n\tstopThrowingDonut = () => {\n\t\tthis.setState({ isThrowing: false, displayDonut: false });\n\t\t// console.log(\"stopthrow\")\n\t};\n\n\tgameLoop = () => {\n\t\tthis.state.donutPopped.map((item) => this.collisionDetection(item));\n\t\tthis.state.beerPopped.map((item) => this.collisionDetectionBeer(item));\n\n\t\tthis.state.obstaclePopped.map((item) => {\n\t\t\tthis.collisionDetectionObstacle(item);\n\t\t});\n\t\tif (this.state.obstaclePopped.status === \"picked\") {\n\t\t\tdisplayBarrel = \"none\";\n\t\t} else {\n\t\t\tdisplay = \"block\";\n\t\t}\n\t\tthis.testLimitsOfMap();\n\t};\n\n\trender() {\n\t\t// Modal\n\t\tlet params = new URLSearchParams(this.props.location.search);\n\n\t\tconst bgStyle = {\n\t\t\tbackgroundPositionY: config.background.position,\n\t\t\tbackgroundPositionX: -this.state.positionX / config.background.defilement,\n\t\t\theight: config.background.height\n\t\t};\n\n\t\treturn (\n\t\t\t<div className=\"game\" style={bgStyle}>\n\t\t\t\t<Donut donutPopped={this.state.donutPopped} donutPosition={this.state.defilement} />\n\t\t\t\t<Beer beerPopped={this.state.beerPopped} beerPosition={this.state.defilement} />\n\t\t\t\t<Obstacle obstaclePopped={this.state.obstaclePopped} obstaclePosition={this.state.defilement} />\n\t\t\t\t<MovingObs\n\t\t\t\t\tpositionMovingObsX={this.state.opponentPos.positionMovingObsX}\n\t\t\t\t\tpositionMovingObsY={this.state.opponentPos.positionMovingObsY}\n\t\t\t\t\tdefilement={this.state.defilement}\n\t\t\t\t/>\n\t\t\t\t<Bart\n\t\t\t\t\tpositionBartX={this.state.bartPos.positionBartX + this.state.defilement}\n\t\t\t\t\tpositionBartY={this.state.bartPos.positionBartY}\n\t\t\t\t/>\n\t\t\t\t<Homer\n\t\t\t\t\tpositionX={this.state.positionX}\n\t\t\t\t\tpositionY={this.state.positionY}\n\t\t\t\t\tisRunning={this.state.isRunning}\n\t\t\t\t\tisHomerRunningLeft={this.state.isHomerRunningLeft}\n\t\t\t\t\tdonutCount={this.donutCount()}\n\t\t\t\t\tisThrowing={this.state.isThrowing}\n\t\t\t\t/>\n\n\t\t\t\t<DonutCounter donutCount={this.donutCount()} />\n\t\t\t\t<Health beerCounter={this.beerCount()} obstCounter={this.obstacleCollisionCount()} />\n\n\t\t\t\t<JoyWrapper\n\t\t\t\t\tsetStep={this.setStep}\n\t\t\t\t\tstartRunning={this.startRunning}\n\t\t\t\t\tstopRunning={this.stopRunning}\n\t\t\t\t\ttoTheRight={this.toTheRight}\n\t\t\t\t\ttoTheLeft={this.toTheLeft}\n\t\t\t\t\ttoTheTop={this.toTheTop}\n\t\t\t\t\ttoTheBottom={this.toTheBottom}\n\t\t\t\t\tdisplayJoystick={this.state.paused}\n\t\t\t\t/>\n\n\t\t\t\t<BoutonA\n\t\t\t\t\tthrowingDonut={this.throwingDonut}\n\t\t\t\t\tstopThrowingDonut={this.stopThrowingDonut}\n\t\t\t\t\tdisplayButtonA={this.state.paused}\n\t\t\t\t/>\n\n\t\t\t\t<Timer pauseGame={this.pauseGame} seconds={this.state.seconds} />\n\n\t\t\t\t{params.get(\"modal\") && (\n\t\t\t\t\t<Modal modal={this.props.location.search} origin={null} resume={() => this.pauseGame()} />\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}