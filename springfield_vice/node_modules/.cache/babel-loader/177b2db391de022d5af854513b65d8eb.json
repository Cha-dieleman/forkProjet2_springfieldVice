{"ast":null,"code":"var _jsxFileName = \"/Users/oliv/Documents/GIT_PROJET03/lyon-0919-react-p2-springfield-vice/springfield_vice/src/pages/Game.js\";\nimport React, { Component } from \"react\";\nimport Homer from \"../components/Homer\"; //import ObstacleF from \"../components/ObstacleF\";\n\nimport config from \"../components/configSpringfieldVice.json\";\nimport JoyWrapper from \"../components/Joystick\";\nimport Timer from \"../components/Timer\";\nimport Donut from \"../components/Item\";\nimport DonutCounter from \"../components/DonutCounter\";\nimport BoutonA from \"../components/BoutonA\";\nimport \"./game.css\";\nimport Modal from \"../components/Modal\";\nimport { getRandomArbitrary } from \"../components/helpers\";\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.testLimitsOfMap = () => {\n      if (this.state.positionY < config.limits.topLimit) this.setState({\n        positionY: config.limits.topLimit\n      });else if (this.state.positionY > config.limits.bottomLimit) this.setState({\n        positionY: config.limits.bottomLimit\n      });else if (this.state.positionX > config.limits.rightLimit) this.setState({\n        positionX: config.limits.rightLimit\n      });else if (this.state.positionX < config.limits.leftLimit) this.setState({\n        positionX: config.limits.leftLimit\n      });\n    };\n\n    this.setStep = (stepX, stepY) => {\n      this.stepX = stepX;\n      this.stepY = stepY;\n    };\n\n    this.move = () => {\n      const _this$state = this.state,\n            positionX = _this$state.positionX,\n            positionY = _this$state.positionY,\n            positionDonutX = _this$state.positionDonutX,\n            positionObstacleX = _this$state.positionObstacleX;\n      this.setState({\n        positionX: positionX + this.stepX,\n        positionY: positionY + this.stepY,\n        moving: true\n      }); //console.log(this.stepX, this.stepY);\n\n      if (this.stepX < 0) {\n        this.setState({\n          isHomerRunningLeft: true\n        });\n      } else if (this.stepX > 0) {\n        this.setState({\n          isHomerRunningLeft: false\n        });\n      } // if (this.state.isRunning)\n      // \tthis.timeOut = setTimeout(() => this.move(), 10);\n\n\n      if (this.state.isRunning === false) this.stopRunning();\n      if (positionX !== config.limits.leftLimit) this.setState({\n        donutPosition: this.state.donutPosition - this.stepX / config.background.defilement\n      });\n      this.setState({\n        relativePositionX: this.state.positionX - this.state.donutPosition\n      });\n    };\n\n    this.startRunning = () => {\n      this.setState({\n        isRunning: true\n      });\n      this.state.intervalHomer = setInterval(() => this.move(), 50);\n    };\n\n    this.stopRunning = () => {\n      this.setState({\n        isRunning: false\n      });\n      clearInterval(this.state.intervalHomer);\n    };\n\n    this.tick = () => {\n      let seconds = this.state.seconds;\n      this.setState({\n        seconds: seconds - 1\n      });\n\n      if (seconds === 0) {\n        this.setState({\n          seconds: 0\n        });\n        alert(\"GAME OVER\");\n        clearInterval(this.interval);\n      }\n    };\n\n    this.componentDidMount = () => {\n      this.interval = setInterval(() => this.tick(), 1000);\n    };\n\n    this.pauseTimer = () => {\n      if (this.state.paused === false) {\n        clearInterval(this.interval);\n      } else {\n        this.componentDidMount();\n      }\n    };\n\n    this.pauseGame = () => {\n      this.setState({\n        paused: !this.state.paused\n      });\n      this.pauseTimer();\n    };\n\n    this.showModal = () => {\n      this.setState({\n        showModal: true\n      });\n    };\n\n    this.hideModal = () => {\n      this.setState({\n        showModal: false\n      });\n    };\n\n    this.collisionDetection = item => {\n      if (this.state.relativePositionX > item.positionDonutX - 30 && this.state.relativePositionX < item.positionDonutX + 30 && this.state.positionY < item.positionDonutY + 30 && this.state.positionY > item.positionDonutY - 30) item.picked = true;\n    };\n\n    this.donutCount = () => {\n      let donutCount = 0;\n      this.state.donutPopped.map(item => item.picked ? donutCount = donutCount + 1 : donutCount = donutCount); //console.log(\"donutCount = \", donutCount);\n\n      return donutCount;\n    };\n\n    this.throwingDonut = () => {\n      this.setState({\n        donutCount: this.state.donutCount - 1,\n        catchDonut: false\n      });\n    };\n\n    this.gameLoop = () => {\n      this.state.donutPopped.map(item => this.collisionDetection(item));\n      this.testLimitsOfMap();\n    };\n\n    this.state = {\n      positionX: config.initialPosition.x,\n      positionY: config.initialPosition.y,\n      positionObstacleY: getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit),\n      positionObstacleX: getRandomArbitrary(config.limits.leftLimit, config.limits.rightLimit),\n      showModal: false,\n      seconds: config.timer.seconds,\n      paused: false,\n      donutPosition: 0,\n      positionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n      catchDonut: false,\n      donutCount: 0,\n      moving: false,\n      donutPopped: [{\n        positionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n        positionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        picked: false\n      }, {\n        positionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n        positionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        picked: false\n      }, {\n        positionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n        positionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        picked: false\n      }, {\n        positionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n        positionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        picked: false\n      }],\n      relativePositionX: config.initialPosition.x,\n      isRunning: false,\n      isHomerRunningLeft: false\n    };\n    this.stepX = 0;\n    this.stepY = 0;\n    this.tick = this.tick.bind(this);\n    this.interval = undefined;\n  }\n\n  render() {\n    const bgStyle = {\n      backgroundPositionY: config.background.position,\n      backgroundPositionX: -this.state.positionX / config.background.defilement,\n      height: config.background.height\n    };\n    {\n      this.gameLoop();\n    }\n    return React.createElement(\"div\", {\n      className: \"game\",\n      style: bgStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(Donut, {\n      donutPopped: this.state.donutPopped,\n      donutPosition: this.state.donutPosition,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), React.createElement(Homer, {\n      positionX: this.state.positionX,\n      positionY: this.state.positionY,\n      isRunning: this.state.isRunning,\n      isHomerRunningLeft: this.state.isHomerRunningLeft,\n      donut: this.state.catchDonut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), React.createElement(DonutCounter, {\n      donutCount: this.donutCount(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), React.createElement(JoyWrapper, {\n      setStep: this.setStep,\n      startRunning: this.startRunning,\n      stopRunning: this.stopRunning,\n      toTheRight: this.toTheRight,\n      toTheLeft: this.toTheLeft,\n      toTheTop: this.toTheTop,\n      toTheBottom: this.toTheBottom,\n      displayJoystick: this.state.paused,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), React.createElement(BoutonA, {\n      throwingDonut: this.throwingDonut,\n      displayButtonA: this.state.paused,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), React.createElement(Timer, {\n      pauseGame: this.pauseGame,\n      showModal: this.showModal,\n      seconds: this.state.seconds,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      className: \"modal\",\n      pauseGame: this.pauseGame,\n      show: this.state.showModal,\n      hideModal: this.hideModal,\n      showModal: this.showModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/oliv/Documents/GIT_PROJET03/lyon-0919-react-p2-springfield-vice/springfield_vice/src/pages/Game.js"],"names":["React","Component","Homer","config","JoyWrapper","Timer","Donut","DonutCounter","BoutonA","Modal","getRandomArbitrary","Game","constructor","props","testLimitsOfMap","state","positionY","limits","topLimit","setState","bottomLimit","positionX","rightLimit","leftLimit","setStep","stepX","stepY","move","positionDonutX","positionObstacleX","moving","isHomerRunningLeft","isRunning","stopRunning","donutPosition","background","defilement","relativePositionX","startRunning","intervalHomer","setInterval","clearInterval","tick","seconds","alert","interval","componentDidMount","pauseTimer","paused","pauseGame","showModal","hideModal","collisionDetection","item","positionDonutY","picked","donutCount","donutPopped","map","throwingDonut","catchDonut","gameLoop","initialPosition","x","y","positionObstacleY","timer","parseInt","bind","undefined","render","bgStyle","backgroundPositionY","position","backgroundPositionX","height","toTheRight","toTheLeft","toTheTop","toTheBottom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Homer from \"../components/Homer\";\n//import ObstacleF from \"../components/ObstacleF\";\nimport config from \"../components/configSpringfieldVice.json\";\nimport JoyWrapper from \"../components/Joystick\";\nimport Timer from \"../components/Timer\";\nimport Donut from \"../components/Item\";\nimport DonutCounter from \"../components/DonutCounter\";\nimport BoutonA from \"../components/BoutonA\";\nimport \"./game.css\";\nimport Modal from \"../components/Modal\";\nimport { getRandomArbitrary } from \"../components/helpers\";\n\nclass Game extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tpositionX: config.initialPosition.x,\n\t\t\tpositionY: config.initialPosition.y,\n\t\t\tpositionObstacleY: getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit),\n\t\t\tpositionObstacleX: getRandomArbitrary(config.limits.leftLimit, config.limits.rightLimit),\n\t\t\tshowModal: false,\n\t\t\tseconds: config.timer.seconds,\n\t\t\tpaused: false,\n\t\t\tdonutPosition: 0,\n\t\t\tpositionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n\t\t\tcatchDonut: false,\n\t\t\tdonutCount: 0,\n\t\t\tmoving: false,\n\t\t\tdonutPopped: [\n\t\t\t\t{\n\t\t\t\t\tpositionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n\t\t\t\t\tpositionDonutY: parseInt(\n\t\t\t\t\t\tgetRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)\n\t\t\t\t\t),\n\t\t\t\t\tpicked: false\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpositionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n\t\t\t\t\tpositionDonutY: parseInt(\n\t\t\t\t\t\tgetRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)\n\t\t\t\t\t),\n\t\t\t\t\tpicked: false\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpositionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n\t\t\t\t\tpositionDonutY: parseInt(\n\t\t\t\t\t\tgetRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)\n\t\t\t\t\t),\n\t\t\t\t\tpicked: false\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpositionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n\t\t\t\t\tpositionDonutY: parseInt(\n\t\t\t\t\t\tgetRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)\n\t\t\t\t\t),\n\t\t\t\t\tpicked: false\n\t\t\t\t}\n\t\t\t],\n\t\t\trelativePositionX: config.initialPosition.x,\n\t\t\tisRunning: false,\n\t\t\tisHomerRunningLeft: false\n\t\t};\n\n\t\tthis.stepX = 0;\n\t\tthis.stepY = 0;\n\t\tthis.tick = this.tick.bind(this);\n\t\tthis.interval = undefined;\n\t}\n\n\ttestLimitsOfMap = () => {\n\t\tif (this.state.positionY < config.limits.topLimit) this.setState({ positionY: config.limits.topLimit });\n\t\telse if (this.state.positionY > config.limits.bottomLimit)\n\t\t\tthis.setState({ positionY: config.limits.bottomLimit });\n\t\telse if (this.state.positionX > config.limits.rightLimit)\n\t\t\tthis.setState({ positionX: config.limits.rightLimit });\n\t\telse if (this.state.positionX < config.limits.leftLimit)\n\t\t\tthis.setState({ positionX: config.limits.leftLimit });\n\t};\n\n\tsetStep = (stepX, stepY) => {\n\t\tthis.stepX = stepX;\n\t\tthis.stepY = stepY;\n\t};\n\n\tmove = () => {\n\t\tconst { positionX, positionY, positionDonutX, positionObstacleX } = this.state;\n\n\t\tthis.setState({\n\t\t\tpositionX: positionX + this.stepX,\n\t\t\tpositionY: positionY + this.stepY,\n\t\t\tmoving: true\n\t\t});\n\t\t//console.log(this.stepX, this.stepY);\n\n\t\tif (this.stepX < 0) {\n\t\t\tthis.setState({ isHomerRunningLeft: true });\n\t\t} else if (this.stepX > 0) {\n\t\t\tthis.setState({ isHomerRunningLeft: false });\n\t\t}\n\t\t// if (this.state.isRunning)\n\t\t// \tthis.timeOut = setTimeout(() => this.move(), 10);\n\n\t\tif (this.state.isRunning === false) this.stopRunning();\n\n\t\tif (positionX !== config.limits.leftLimit)\n\t\t\tthis.setState({ donutPosition: this.state.donutPosition - this.stepX / config.background.defilement });\n\t\tthis.setState({ relativePositionX: this.state.positionX - this.state.donutPosition });\n\t};\n\n\tstartRunning = () => {\n\t\tthis.setState({ isRunning: true });\n\t\tthis.state.intervalHomer = setInterval(() => this.move(), 50);\n\t};\n\tstopRunning = () => {\n\t\tthis.setState({ isRunning: false });\n\t\tclearInterval(this.state.intervalHomer);\n\t};\n\n\ttick = () => {\n\t\tlet { seconds } = this.state;\n\t\tthis.setState({ seconds: seconds - 1 });\n\n\t\tif (seconds === 0) {\n\t\t\tthis.setState({ seconds: 0 });\n\t\t\talert(\"GAME OVER\");\n\t\t\tclearInterval(this.interval);\n\t\t}\n\t};\n\n\tcomponentDidMount = () => {\n\t\tthis.interval = setInterval(() => this.tick(), 1000);\n\t};\n\n\tpauseTimer = () => {\n\t\tif (this.state.paused === false) {\n\t\t\tclearInterval(this.interval);\n\t\t} else {\n\t\t\tthis.componentDidMount();\n\t\t}\n\t};\n\n\tpauseGame = () => {\n\t\tthis.setState({ paused: !this.state.paused });\n\t\tthis.pauseTimer();\n\t};\n\n\tshowModal = () => {\n\t\tthis.setState({ showModal: true });\n\t};\n\n\thideModal = () => {\n\t\tthis.setState({ showModal: false });\n\t};\n\n\tcollisionDetection = (item) => {\n\t\tif (\n\t\t\tthis.state.relativePositionX > item.positionDonutX - 30 &&\n\t\t\tthis.state.relativePositionX < item.positionDonutX + 30 &&\n\t\t\tthis.state.positionY < item.positionDonutY + 30 &&\n\t\t\tthis.state.positionY > item.positionDonutY - 30\n\t\t)\n\t\t\titem.picked = true;\n\t};\n\n\tdonutCount = () => {\n\t\tlet donutCount = 0;\n\t\tthis.state.donutPopped.map((item) =>\n\t\t\titem.picked ? (donutCount = donutCount + 1) : (donutCount = donutCount)\n\t\t);\n\t\t//console.log(\"donutCount = \", donutCount);\n\t\treturn donutCount;\n\t};\n\n\tthrowingDonut = () => {\n\t\tthis.setState({ donutCount: this.state.donutCount - 1, catchDonut: false });\n\t};\n\tgameLoop = () => {\n\t\tthis.state.donutPopped.map((item) => this.collisionDetection(item));\n\t\tthis.testLimitsOfMap();\n\t};\n\trender() {\n\t\tconst bgStyle = {\n\t\t\tbackgroundPositionY: config.background.position,\n\t\t\tbackgroundPositionX: -this.state.positionX / config.background.defilement,\n\t\t\theight: config.background.height\n\t\t};\n\t\t{\n\t\t\tthis.gameLoop();\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"game\" style={bgStyle}>\n\t\t\t\t<Donut donutPopped={this.state.donutPopped} donutPosition={this.state.donutPosition} />\n\t\t\t\t<Homer\n\t\t\t\t\tpositionX={this.state.positionX}\n\t\t\t\t\tpositionY={this.state.positionY}\n\t\t\t\t\tisRunning={this.state.isRunning}\n\t\t\t\t\tisHomerRunningLeft={this.state.isHomerRunningLeft}\n\t\t\t\t\tdonut={this.state.catchDonut}\n\t\t\t\t/>\n\t\t\t\t<DonutCounter donutCount={this.donutCount()} />\n\t\t\t\t<JoyWrapper\n\t\t\t\t\tsetStep={this.setStep}\n\t\t\t\t\tstartRunning={this.startRunning}\n\t\t\t\t\tstopRunning={this.stopRunning}\n\t\t\t\t\ttoTheRight={this.toTheRight}\n\t\t\t\t\ttoTheLeft={this.toTheLeft}\n\t\t\t\t\ttoTheTop={this.toTheTop}\n\t\t\t\t\ttoTheBottom={this.toTheBottom}\n\t\t\t\t\tdisplayJoystick={this.state.paused}\n\t\t\t\t/>\n\t\t\t\t<BoutonA throwingDonut={this.throwingDonut} displayButtonA={this.state.paused} />\n\t\t\t\t<Timer pauseGame={this.pauseGame} showModal={this.showModal} seconds={this.state.seconds} />\n\t\t\t\t<Modal\n\t\t\t\t\tclassName=\"modal\"\n\t\t\t\t\tpauseGame={this.pauseGame}\n\t\t\t\t\tshow={this.state.showModal}\n\t\t\t\t\thideModal={this.hideModal}\n\t\t\t\t\tshowModal={this.showModal}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}