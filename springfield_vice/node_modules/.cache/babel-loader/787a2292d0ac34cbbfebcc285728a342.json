{"ast":null,"code":"var _jsxFileName = \"/Users/oliv/Documents/GIT_PROJET03/lyon-0919-react-p2-springfield-vice/springfield_vice/src/pages/Game.js\";\nimport React, { Component } from \"react\";\nimport Homer from \"../components/Homer\";\nimport ObstacleF from \"../components/ObstacleF\";\nimport config from \"../components/configSpringfieldVice.json\";\nimport JoyWrapper from \"../components/Joystick\";\nimport Timer from \"../components/Timer\";\nimport Donut from \"../components/Item\";\nimport DonutCounter from \"../components/DonutCounter\";\nimport BoutonA from \"../components/BoutonA\";\nimport \"./game.css\";\nimport Modal from \"../components/Modal\";\nimport { getRandomArbitrary } from \"../components/helpers\";\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.testLimitsOfMap = () => {\n      if (this.state.positionY < config.limits.topLimit) this.setState({\n        positionY: config.limits.topLimit\n      });else if (this.state.positionY > config.limits.bottomLimit) this.setState({\n        positionY: config.limits.bottomLimit\n      });else if (this.state.positionX > config.limits.rightLimit) this.setState({\n        positionX: config.limits.rightLimit\n      });else if (this.state.positionX < config.limits.leftLimit) this.setState({\n        positionX: config.limits.leftLimit\n      });\n    };\n\n    this.move = (stepX, stepY) => {\n      const _this$state = this.state,\n            positionX = _this$state.positionX,\n            positionY = _this$state.positionY,\n            positionDonutX = _this$state.positionDonutX,\n            positionObstacleX = _this$state.positionObstacleX;\n      this.setState({\n        positionX: positionX + stepX,\n        positionY: positionY + stepY,\n        moving: true\n      });\n      if (positionX !== config.limits.leftLimit) this.setState({\n        donutPosition: this.state.donutPosition - stepX / config.background.defilement\n      });\n      this.setState({\n        relativePositionX: this.state.positionX + this.state.donutPosition\n      });\n      this.stopMove();\n      this.timeOut = setTimeout(() => this.move(stepX, stepY), 20);\n      this.collisionDetection();\n      this.toCountDonuts();\n    };\n\n    this.stopMove = () => {\n      clearTimeout(this.timeOut);\n    };\n\n    this.tick = () => {\n      let seconds = this.state.seconds;\n      this.setState({\n        seconds: seconds - 1\n      });\n\n      if (seconds === 0) {\n        this.setState({\n          seconds: 0\n        });\n        alert(\"GAME OVER\");\n        clearInterval(this.interval);\n      }\n    };\n\n    this.componentDidMount = () => {\n      this.interval = setInterval(() => this.tick(), 1000);\n    };\n\n    this.pauseTimer = () => {\n      if (this.state.paused === false) {\n        clearInterval(this.interval);\n      } else {\n        this.componentDidMount();\n      }\n    };\n\n    this.pauseGame = () => {\n      this.setState({\n        paused: !this.state.paused\n      });\n      this.pauseTimer();\n    };\n\n    this.showModal = () => {\n      this.setState({\n        showModal: true\n      });\n    };\n\n    this.hideModal = () => {\n      this.setState({\n        showModal: false\n      });\n    };\n\n    this.collisionDetection = () => {\n      if (this.state.positionX > this.state.positionDonutX - 30 && this.state.positionX < this.state.positionDonutX + 30 && this.state.positionY < this.state.positionDonutY + 30 && this.state.positionY > this.state.positionDonutY - 30) this.setState({\n        catchDonut: true\n      });\n    };\n\n    this.toCountDonuts = () => {\n      if (this.state.catchDonut) this.setState({\n        donutCount: 1\n      });\n    };\n\n    this.throwingDonut = () => {\n      this.setState({\n        throwing: !this.state.throwing\n      });\n      this.setState({\n        donutCount: 0\n      });\n      this.setState({\n        catchDonut: false\n      });\n    };\n\n    this.state = {\n      positionX: config.initialPosition.x,\n      positionY: config.initialPosition.y,\n      positionObstacleY: getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit),\n      positionObstacleX: getRandomArbitrary(config.limits.leftLimit, config.limits.rightLimit),\n      showModal: false,\n      seconds: config.timer.seconds,\n      paused: false,\n      donutPosition: 0,\n      positionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n      catchDonut: false,\n      donutCount: 0,\n      throwing: false,\n      moving: false,\n      donutPoped: [{\n        positionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n        positionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        picked: false\n      }, {\n        positionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n        positionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        picked: false\n      }, {\n        positionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n        positionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        picked: false\n      }, {\n        positionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n        positionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        picked: false\n      }],\n      relativePositionX: config.initialPosition.x,\n      relativePositionY: config.initialPosition.y\n    };\n    this.tick = this.tick.bind(this);\n    this.interval = undefined;\n  }\n\n  render() {\n    const bgStyle = {\n      backgroundPositionY: config.background.position,\n      backgroundPositionX: -this.state.positionX / config.background.defilement,\n      height: config.background.height\n    };\n    return React.createElement(\"div\", {\n      className: \"game\",\n      style: bgStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, this.testLimitsOfMap(), React.createElement(Donut, {\n      donutPoped: this.state.donutPoped,\n      donutPosition: this.state.donutPosition,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(Homer, {\n      positionX: this.state.positionX,\n      positionY: this.state.positionY,\n      donut: this.state.catchDonut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(DonutCounter, {\n      donutCount: this.state.donutCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(JoyWrapper, {\n      move: this.move,\n      stopMove: this.stopMove,\n      toTheRight: this.toTheRight,\n      toTheLeft: this.toTheLeft,\n      toTheTop: this.toTheTop,\n      toTheBottom: this.toTheBottom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(BoutonA, {\n      throwingDonut: this.throwingDonut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(Timer, {\n      pauseGame: this.pauseGame,\n      showModal: this.showModal,\n      seconds: this.state.seconds,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      className: \"modal\",\n      pauseGame: this.pauseGame,\n      show: this.state.showModal,\n      hideModal: this.hideModal,\n      showModal: this.showModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/oliv/Documents/GIT_PROJET03/lyon-0919-react-p2-springfield-vice/springfield_vice/src/pages/Game.js"],"names":["React","Component","Homer","ObstacleF","config","JoyWrapper","Timer","Donut","DonutCounter","BoutonA","Modal","getRandomArbitrary","Game","constructor","props","testLimitsOfMap","state","positionY","limits","topLimit","setState","bottomLimit","positionX","rightLimit","leftLimit","move","stepX","stepY","positionDonutX","positionObstacleX","moving","donutPosition","background","defilement","relativePositionX","stopMove","timeOut","setTimeout","collisionDetection","toCountDonuts","clearTimeout","tick","seconds","alert","clearInterval","interval","componentDidMount","setInterval","pauseTimer","paused","pauseGame","showModal","hideModal","positionDonutY","catchDonut","donutCount","throwingDonut","throwing","initialPosition","x","y","positionObstacleY","timer","parseInt","donutPoped","picked","relativePositionY","bind","undefined","render","bgStyle","backgroundPositionY","position","backgroundPositionX","height","toTheRight","toTheLeft","toTheTop","toTheBottom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Homer from \"../components/Homer\";\nimport ObstacleF from \"../components/ObstacleF\";\nimport config from \"../components/configSpringfieldVice.json\";\nimport JoyWrapper from \"../components/Joystick\";\nimport Timer from \"../components/Timer\";\nimport Donut from \"../components/Item\";\nimport DonutCounter from \"../components/DonutCounter\";\nimport BoutonA from \"../components/BoutonA\";\nimport \"./game.css\";\nimport Modal from \"../components/Modal\";\nimport { getRandomArbitrary } from \"../components/helpers\";\n\nclass Game extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tpositionX: config.initialPosition.x,\n\t\t\tpositionY: config.initialPosition.y,\n\t\t\tpositionObstacleY: getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit),\n\t\t\tpositionObstacleX: getRandomArbitrary(config.limits.leftLimit, config.limits.rightLimit),\n\t\t\tshowModal: false,\n\t\t\tseconds: config.timer.seconds,\n\t\t\tpaused: false,\n\t\t\tdonutPosition: 0,\n\t\t\tpositionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n\t\t\tcatchDonut: false,\n\t\t\tdonutCount: 0,\n\t\t\tthrowing: false,\n\t\t\tmoving: false,\n\t\t\tdonutPoped: [\n\t\t\t\t{\n\t\t\t\t\tpositionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n\t\t\t\t\tpositionDonutY: parseInt(\n\t\t\t\t\t\tgetRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)\n\t\t\t\t\t),\n\t\t\t\t\tpicked: false\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpositionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n\t\t\t\t\tpositionDonutY: parseInt(\n\t\t\t\t\t\tgetRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)\n\t\t\t\t\t),\n\t\t\t\t\tpicked: false\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpositionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n\t\t\t\t\tpositionDonutY: parseInt(\n\t\t\t\t\t\tgetRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)\n\t\t\t\t\t),\n\t\t\t\t\tpicked: false\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpositionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n\t\t\t\t\tpositionDonutY: parseInt(\n\t\t\t\t\t\tgetRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)\n\t\t\t\t\t),\n\t\t\t\t\tpicked: false\n\t\t\t\t}\n\t\t\t],\n\t\t\trelativePositionX: config.initialPosition.x,\n\t\t\trelativePositionY: config.initialPosition.y\n\t\t};\n\t\tthis.tick = this.tick.bind(this);\n\t\tthis.interval = undefined;\n\t}\n\n\ttestLimitsOfMap = () => {\n\t\tif (this.state.positionY < config.limits.topLimit) this.setState({ positionY: config.limits.topLimit });\n\t\telse if (this.state.positionY > config.limits.bottomLimit)\n\t\t\tthis.setState({ positionY: config.limits.bottomLimit });\n\t\telse if (this.state.positionX > config.limits.rightLimit)\n\t\t\tthis.setState({ positionX: config.limits.rightLimit });\n\t\telse if (this.state.positionX < config.limits.leftLimit)\n\t\t\tthis.setState({ positionX: config.limits.leftLimit });\n\t};\n\n\tmove = (stepX, stepY) => {\n\t\tconst { positionX, positionY, positionDonutX, positionObstacleX } = this.state;\n\n\t\tthis.setState({\n\t\t\tpositionX: positionX + stepX,\n\t\t\tpositionY: positionY + stepY,\n\t\t\tmoving: true\n\t\t});\n\t\tif (positionX !== config.limits.leftLimit)\n\t\t\tthis.setState({ donutPosition: this.state.donutPosition - stepX / config.background.defilement });\n\t\tthis.setState({ relativePositionX: this.state.positionX + this.state.donutPosition });\n\n\t\tthis.stopMove();\n\t\tthis.timeOut = setTimeout(() => this.move(stepX, stepY), 20);\n\t\tthis.collisionDetection();\n\t\tthis.toCountDonuts();\n\t};\n\n\tstopMove = () => {\n\t\tclearTimeout(this.timeOut);\n\t};\n\n\ttick = () => {\n\t\tlet { seconds } = this.state;\n\t\tthis.setState({ seconds: seconds - 1 });\n\n\t\tif (seconds === 0) {\n\t\t\tthis.setState({ seconds: 0 });\n\t\t\talert(\"GAME OVER\");\n\t\t\tclearInterval(this.interval);\n\t\t}\n\t};\n\n\tcomponentDidMount = () => {\n\t\tthis.interval = setInterval(() => this.tick(), 1000);\n\t};\n\n\tpauseTimer = () => {\n\t\tif (this.state.paused === false) {\n\t\t\tclearInterval(this.interval);\n\t\t} else {\n\t\t\tthis.componentDidMount();\n\t\t}\n\t};\n\n\tpauseGame = () => {\n\t\tthis.setState({ paused: !this.state.paused });\n\t\tthis.pauseTimer();\n\t};\n\n\tshowModal = () => {\n\t\tthis.setState({ showModal: true });\n\t};\n\n\thideModal = () => {\n\t\tthis.setState({ showModal: false });\n\t};\n\n\tcollisionDetection = () => {\n\t\tif (\n\t\t\tthis.state.positionX > this.state.positionDonutX - 30 &&\n\t\t\tthis.state.positionX < this.state.positionDonutX + 30 &&\n\t\t\tthis.state.positionY < this.state.positionDonutY + 30 &&\n\t\t\tthis.state.positionY > this.state.positionDonutY - 30\n\t\t)\n\t\t\tthis.setState({ catchDonut: true });\n\t};\n\ttoCountDonuts = () => {\n\t\tif (this.state.catchDonut) this.setState({ donutCount: 1 });\n\t};\n\tthrowingDonut = () => {\n\t\tthis.setState({ throwing: !this.state.throwing });\n\t\tthis.setState({ donutCount: 0 });\n\t\tthis.setState({ catchDonut: false });\n\t};\n\n\trender() {\n\t\tconst bgStyle = {\n\t\t\tbackgroundPositionY: config.background.position,\n\t\t\tbackgroundPositionX: -this.state.positionX / config.background.defilement,\n\t\t\theight: config.background.height\n\t\t};\n\n\t\treturn (\n\t\t\t<div className=\"game\" style={bgStyle}>\n\t\t\t\t{this.testLimitsOfMap()}\n\t\t\t\t<Donut donutPoped={this.state.donutPoped} donutPosition={this.state.donutPosition} />\n\n\t\t\t\t<Homer\n\t\t\t\t\tpositionX={this.state.positionX}\n\t\t\t\t\tpositionY={this.state.positionY}\n\t\t\t\t\tdonut={this.state.catchDonut}\n\t\t\t\t/>\n\t\t\t\t<DonutCounter donutCount={this.state.donutCount} />\n\t\t\t\t<JoyWrapper\n\t\t\t\t\tmove={this.move}\n\t\t\t\t\tstopMove={this.stopMove}\n\t\t\t\t\ttoTheRight={this.toTheRight}\n\t\t\t\t\ttoTheLeft={this.toTheLeft}\n\t\t\t\t\ttoTheTop={this.toTheTop}\n\t\t\t\t\ttoTheBottom={this.toTheBottom}\n\t\t\t\t/>\n\t\t\t\t<BoutonA throwingDonut={this.throwingDonut} />\n\t\t\t\t<Timer pauseGame={this.pauseGame} showModal={this.showModal} seconds={this.state.seconds} />\n\t\t\t\t<Modal\n\t\t\t\t\tclassName=\"modal\"\n\t\t\t\t\tpauseGame={this.pauseGame}\n\t\t\t\t\tshow={this.state.showModal}\n\t\t\t\t\thideModal={this.hideModal}\n\t\t\t\t\tshowModal={this.showModal}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}