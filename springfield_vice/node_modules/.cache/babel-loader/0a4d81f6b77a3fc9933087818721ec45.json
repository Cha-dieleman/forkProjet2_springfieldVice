{"ast":null,"code":"var _jsxFileName = \"/Users/oliv/Documents/GIT_PROJET03/lyon-0919-react-p2-springfield-vice/springfield_vice/src/pages/Game.js\";\nimport React, { Component } from \"react\";\nimport Homer from \"../components/Homer\";\nimport ObstacleF from \"../components/ObstacleF\";\nimport config from \"../components/configSpringfieldVice.json\";\nimport JoyWrapper from \"../components/Joystick\";\nimport Timer from \"../components/Timer\";\nimport Donut from \"../components/Item\";\nimport DonutCounter from \"../components/DonutCounter\";\nimport BoutonA from \"../components/BoutonA\";\nimport \"./game.css\";\nimport Modal from \"../components/Modal\";\nimport { getRandomArbitrary } from \"../components/helpers\";\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.testLimitsOfMap = () => {\n      if (this.state.positionY < config.limits.topLimit) this.setState({\n        positionY: config.limits.topLimit\n      });else if (this.state.positionY > config.limits.bottomLimit) this.setState({\n        positionY: config.limits.bottomLimit\n      });else if (this.state.positionX > config.limits.rightLimit) this.setState({\n        positionX: config.limits.rightLimit\n      });else if (this.state.positionX < config.limits.leftLimit) this.setState({\n        positionX: config.limits.leftLimit\n      });\n    };\n\n    this.setStep = (stepX, stepY) => {\n      this.stepX = stepX;\n      this.stepY = stepY;\n    };\n\n    this.move = () => {\n      const _this$state = this.state,\n            positionX = _this$state.positionX,\n            positionY = _this$state.positionY,\n            positionDonutX = _this$state.positionDonutX,\n            positionObstacleX = _this$state.positionObstacleX;\n      this.setState({\n        positionX: positionX + this.stepX,\n        positionY: positionY + this.stepY,\n        moving: true\n      });\n      console.log(this.stepX, this.stepY);\n\n      if (this.stepX < 0) {\n        this.setState({\n          isHomerRunningLeft: true\n        });\n      } else if (this.stepX > 0) {\n        this.setState({\n          isHomerRunningLeft: false\n        });\n      } // if (this.state.isRunning)\n      // \tthis.timeOut = setTimeout(() => this.move(), 10);\n\n\n      if (this.state.isRunning === false) this.stopRunning();\n      if (positionX !== config.limits.leftLimit) this.setState({\n        donutPosition: this.state.donutPosition - this.stepX / config.background.defilement\n      });\n      this.setState({\n        relativePositionX: this.state.positionX - this.state.donutPosition\n      });\n      this.state.donutPoped.map(item => this.collisionDetection(item));\n      this.toCountDonuts();\n    };\n\n    this.startRunning = () => {\n      this.setState({\n        isRunning: true\n      });\n      this.state.intervalHomer = setInterval(() => this.move(), 50);\n    };\n\n    this.stopRunning = () => {\n      this.setState({\n        isRunning: false\n      });\n      clearInterval(this.state.intervalHomer);\n    };\n\n    this.tick = () => {\n      let seconds = this.state.seconds;\n      this.setState({\n        seconds: seconds - 1\n      });\n\n      if (seconds === 0) {\n        this.setState({\n          seconds: 0\n        });\n        alert(\"GAME OVER\");\n        clearInterval(this.interval);\n      }\n    };\n\n    this.componentDidMount = () => {\n      this.interval = setInterval(() => this.tick(), 1000);\n    };\n\n    this.pauseTimer = () => {\n      if (this.state.paused === false) {\n        clearInterval(this.interval);\n      } else {\n        this.componentDidMount();\n      }\n    };\n\n    this.pauseGame = () => {\n      this.setState({\n        paused: !this.state.paused\n      });\n      this.pauseTimer();\n    };\n\n    this.showModal = () => {\n      this.setState({\n        showModal: true\n      });\n    };\n\n    this.hideModal = () => {\n      this.setState({\n        showModal: false\n      });\n    };\n\n    this.collisionDetection = item => {\n      if (this.state.relativePositionX > item.positionDonutX - 30 && this.state.relativePositionX < positionDonutX + 30 && this.state.positionY < positionDonutY + 30 && this.state.positionY > positionDonutY - 30) this.setState({\n        catchDonut: true\n      });\n    };\n\n    this.toCountDonuts = () => {\n      if (this.state.catchDonut) this.setState({\n        donutCount: 1\n      });\n    };\n\n    this.throwingDonut = () => {\n      this.setState({\n        throwing: !this.state.throwing\n      });\n      this.setState({\n        donutCount: 0\n      });\n      this.setState({\n        catchDonut: false\n      });\n    };\n\n    this.state = {\n      positionX: config.initialPosition.x,\n      positionY: config.initialPosition.y,\n      positionObstacleY: getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit),\n      positionObstacleX: getRandomArbitrary(config.limits.leftLimit, config.limits.rightLimit),\n      showModal: false,\n      seconds: config.timer.seconds,\n      paused: false,\n      donutPosition: 0,\n      positionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n      catchDonut: false,\n      donutCount: 0,\n      throwing: false,\n      moving: false,\n      donutPoped: [{\n        positionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n        positionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        picked: false\n      }, {\n        positionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n        positionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        picked: false\n      }, {\n        positionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n        positionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        picked: false\n      }, {\n        positionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n        positionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n        picked: false\n      }],\n      relativePositionX: config.initialPosition.x,\n      isRunning: false,\n      isHomerRunningLeft: false\n    };\n    this.stepX = 0;\n    this.stepY = 0;\n    this.tick = this.tick.bind(this);\n    this.interval = undefined;\n  }\n\n  render() {\n    const bgStyle = {\n      backgroundPositionY: config.background.position,\n      backgroundPositionX: -this.state.positionX / config.background.defilement,\n      height: config.background.height\n    };\n    return React.createElement(\"div\", {\n      className: \"game\",\n      style: bgStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, this.testLimitsOfMap(), React.createElement(Donut, {\n      donutPoped: this.state.donutPoped,\n      donutPosition: this.state.donutPosition,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), React.createElement(Homer, {\n      positionX: this.state.positionX,\n      positionY: this.state.positionY,\n      isRunning: this.state.isRunning,\n      isHomerRunningLeft: this.state.isHomerRunningLeft,\n      donut: this.state.catchDonut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), React.createElement(DonutCounter, {\n      donutCount: this.state.donutCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(JoyWrapper, {\n      setStep: this.setStep,\n      startRunning: this.startRunning,\n      stopRunning: this.stopRunning,\n      toTheRight: this.toTheRight,\n      toTheLeft: this.toTheLeft,\n      toTheTop: this.toTheTop,\n      toTheBottom: this.toTheBottom,\n      displayJoystick: this.state.paused,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(BoutonA, {\n      throwingDonut: this.throwingDonut,\n      displayButtonA: this.state.paused,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), React.createElement(Timer, {\n      pauseGame: this.pauseGame,\n      showModal: this.showModal,\n      seconds: this.state.seconds,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      className: \"modal\",\n      pauseGame: this.pauseGame,\n      show: this.state.showModal,\n      hideModal: this.hideModal,\n      showModal: this.showModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/oliv/Documents/GIT_PROJET03/lyon-0919-react-p2-springfield-vice/springfield_vice/src/pages/Game.js"],"names":["React","Component","Homer","ObstacleF","config","JoyWrapper","Timer","Donut","DonutCounter","BoutonA","Modal","getRandomArbitrary","Game","constructor","props","testLimitsOfMap","state","positionY","limits","topLimit","setState","bottomLimit","positionX","rightLimit","leftLimit","setStep","stepX","stepY","move","positionDonutX","positionObstacleX","moving","console","log","isHomerRunningLeft","isRunning","stopRunning","donutPosition","background","defilement","relativePositionX","donutPoped","map","item","collisionDetection","toCountDonuts","startRunning","intervalHomer","setInterval","clearInterval","tick","seconds","alert","interval","componentDidMount","pauseTimer","paused","pauseGame","showModal","hideModal","positionDonutY","catchDonut","donutCount","throwingDonut","throwing","initialPosition","x","y","positionObstacleY","timer","parseInt","picked","bind","undefined","render","bgStyle","backgroundPositionY","position","backgroundPositionX","height","toTheRight","toTheLeft","toTheTop","toTheBottom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Homer from \"../components/Homer\";\nimport ObstacleF from \"../components/ObstacleF\";\nimport config from \"../components/configSpringfieldVice.json\";\nimport JoyWrapper from \"../components/Joystick\";\nimport Timer from \"../components/Timer\";\nimport Donut from \"../components/Item\";\nimport DonutCounter from \"../components/DonutCounter\";\nimport BoutonA from \"../components/BoutonA\";\nimport \"./game.css\";\nimport Modal from \"../components/Modal\";\nimport { getRandomArbitrary } from \"../components/helpers\";\n\nclass Game extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tpositionX: config.initialPosition.x,\n\t\t\tpositionY: config.initialPosition.y,\n\t\t\tpositionObstacleY: getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit),\n\t\t\tpositionObstacleX: getRandomArbitrary(config.limits.leftLimit, config.limits.rightLimit),\n\t\t\tshowModal: false,\n\t\t\tseconds: config.timer.seconds,\n\t\t\tpaused: false,\n\t\t\tdonutPosition: 0,\n\t\t\tpositionDonutY: parseInt(getRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)),\n\t\t\tcatchDonut: false,\n\t\t\tdonutCount: 0,\n\t\t\tthrowing: false,\n\t\t\tmoving: false,\n\t\t\tdonutPoped: [\n\t\t\t\t{\n\t\t\t\t\tpositionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n\t\t\t\t\tpositionDonutY: parseInt(\n\t\t\t\t\t\tgetRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)\n\t\t\t\t\t),\n\t\t\t\t\tpicked: false\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpositionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n\t\t\t\t\tpositionDonutY: parseInt(\n\t\t\t\t\t\tgetRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)\n\t\t\t\t\t),\n\t\t\t\t\tpicked: false\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpositionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n\t\t\t\t\tpositionDonutY: parseInt(\n\t\t\t\t\t\tgetRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)\n\t\t\t\t\t),\n\t\t\t\t\tpicked: false\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpositionDonutX: parseInt(getRandomArbitrary(config.limits.leftLimit, 1000)),\n\t\t\t\t\tpositionDonutY: parseInt(\n\t\t\t\t\t\tgetRandomArbitrary(config.limits.topLimit, config.limits.bottomLimit)\n\t\t\t\t\t),\n\t\t\t\t\tpicked: false\n\t\t\t\t}\n\t\t\t],\n\t\t\trelativePositionX: config.initialPosition.x,\n\t\t\tisRunning: false,\n\t\t\tisHomerRunningLeft: false\n\t\t};\n\n\t\tthis.stepX = 0;\n\t\tthis.stepY = 0;\n\t\tthis.tick = this.tick.bind(this);\n\t\tthis.interval = undefined;\n\t}\n\n\ttestLimitsOfMap = () => {\n\t\tif (this.state.positionY < config.limits.topLimit) this.setState({ positionY: config.limits.topLimit });\n\t\telse if (this.state.positionY > config.limits.bottomLimit)\n\t\t\tthis.setState({ positionY: config.limits.bottomLimit });\n\t\telse if (this.state.positionX > config.limits.rightLimit)\n\t\t\tthis.setState({ positionX: config.limits.rightLimit });\n\t\telse if (this.state.positionX < config.limits.leftLimit)\n\t\t\tthis.setState({ positionX: config.limits.leftLimit });\n\t};\n\n\tsetStep = (stepX, stepY) => {\n\t\tthis.stepX = stepX;\n\t\tthis.stepY = stepY;\n\t};\n\n\tmove = () => {\n\t\tconst { positionX, positionY, positionDonutX, positionObstacleX } = this.state;\n\n\t\tthis.setState({\n\t\t\tpositionX: positionX + this.stepX,\n\t\t\tpositionY: positionY + this.stepY,\n\t\t\tmoving: true\n\t\t});\n\t\tconsole.log(this.stepX, this.stepY);\n\n\t\tif (this.stepX < 0) {\n\t\t\tthis.setState({ isHomerRunningLeft: true });\n\t\t} else if (this.stepX > 0) {\n\t\t\tthis.setState({ isHomerRunningLeft: false });\n\t\t}\n\t\t// if (this.state.isRunning)\n\t\t// \tthis.timeOut = setTimeout(() => this.move(), 10);\n\n\t\tif (this.state.isRunning === false) this.stopRunning();\n\n\t\tif (positionX !== config.limits.leftLimit)\n\t\t\tthis.setState({ donutPosition: this.state.donutPosition - this.stepX / config.background.defilement });\n\t\tthis.setState({ relativePositionX: this.state.positionX - this.state.donutPosition });\n\n\t\tthis.state.donutPoped.map((item) => this.collisionDetection(item));\n\n\t\tthis.toCountDonuts();\n\t};\n\n\tstartRunning = () => {\n\t\tthis.setState({ isRunning: true });\n\t\tthis.state.intervalHomer = setInterval(() => this.move(), 50);\n\t};\n\tstopRunning = () => {\n\t\tthis.setState({ isRunning: false });\n\t\tclearInterval(this.state.intervalHomer);\n\t};\n\n\ttick = () => {\n\t\tlet { seconds } = this.state;\n\t\tthis.setState({ seconds: seconds - 1 });\n\n\t\tif (seconds === 0) {\n\t\t\tthis.setState({ seconds: 0 });\n\t\t\talert(\"GAME OVER\");\n\t\t\tclearInterval(this.interval);\n\t\t}\n\t};\n\n\tcomponentDidMount = () => {\n\t\tthis.interval = setInterval(() => this.tick(), 1000);\n\t};\n\n\tpauseTimer = () => {\n\t\tif (this.state.paused === false) {\n\t\t\tclearInterval(this.interval);\n\t\t} else {\n\t\t\tthis.componentDidMount();\n\t\t}\n\t};\n\n\tpauseGame = () => {\n\t\tthis.setState({ paused: !this.state.paused });\n\t\tthis.pauseTimer();\n\t};\n\n\tshowModal = () => {\n\t\tthis.setState({ showModal: true });\n\t};\n\n\thideModal = () => {\n\t\tthis.setState({ showModal: false });\n\t};\n\n\tcollisionDetection = (item) => {\n\t\tif (\n\t\t\tthis.state.relativePositionX > item.positionDonutX - 30 &&\n\t\t\tthis.state.relativePositionX < positionDonutX + 30 &&\n\t\t\tthis.state.positionY < positionDonutY + 30 &&\n\t\t\tthis.state.positionY > positionDonutY - 30\n\t\t)\n\t\t\tthis.setState({ catchDonut: true });\n\t};\n\ttoCountDonuts = () => {\n\t\tif (this.state.catchDonut) this.setState({ donutCount: 1 });\n\t};\n\tthrowingDonut = () => {\n\t\tthis.setState({ throwing: !this.state.throwing });\n\t\tthis.setState({ donutCount: 0 });\n\t\tthis.setState({ catchDonut: false });\n\t};\n\n\trender() {\n\t\tconst bgStyle = {\n\t\t\tbackgroundPositionY: config.background.position,\n\t\t\tbackgroundPositionX: -this.state.positionX / config.background.defilement,\n\t\t\theight: config.background.height\n\t\t};\n\n\t\treturn (\n\t\t\t<div className=\"game\" style={bgStyle}>\n\t\t\t\t{this.testLimitsOfMap()}\n\t\t\t\t<Donut donutPoped={this.state.donutPoped} donutPosition={this.state.donutPosition} />\n\n\t\t\t\t<Homer\n\t\t\t\t\tpositionX={this.state.positionX}\n\t\t\t\t\tpositionY={this.state.positionY}\n\t\t\t\t\tisRunning={this.state.isRunning}\n\t\t\t\t\tisHomerRunningLeft={this.state.isHomerRunningLeft}\n\t\t\t\t\tdonut={this.state.catchDonut}\n\t\t\t\t/>\n\n\t\t\t\t<DonutCounter donutCount={this.state.donutCount} />\n\t\t\t\t<JoyWrapper\n\t\t\t\t\tsetStep={this.setStep}\n\t\t\t\t\tstartRunning={this.startRunning}\n\t\t\t\t\tstopRunning={this.stopRunning}\n\t\t\t\t\ttoTheRight={this.toTheRight}\n\t\t\t\t\ttoTheLeft={this.toTheLeft}\n\t\t\t\t\ttoTheTop={this.toTheTop}\n\t\t\t\t\ttoTheBottom={this.toTheBottom}\n\t\t\t\t\tdisplayJoystick={this.state.paused}\n\t\t\t\t/>\n\n\t\t\t\t<BoutonA throwingDonut={this.throwingDonut} displayButtonA={this.state.paused} />\n\t\t\t\t<Timer pauseGame={this.pauseGame} showModal={this.showModal} seconds={this.state.seconds} />\n\t\t\t\t<Modal\n\t\t\t\t\tclassName=\"modal\"\n\t\t\t\t\tpauseGame={this.pauseGame}\n\t\t\t\t\tshow={this.state.showModal}\n\t\t\t\t\thideModal={this.hideModal}\n\t\t\t\t\tshowModal={this.showModal}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}